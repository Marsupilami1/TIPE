#include "simulation.hpp"
#include "individu.hpp"
#include "champ_de_vitesse.hpp"
#include <cstdlib>
#include <cmath>

extern const unsigned int TAILLE_GRILLE;
extern std::vector<Vect> Distances_sorties;

Simulation::Simulation(unsigned int taille_grille) : m_taille_grille(taille_grille), m_sorties(0), m_murs(0)
{
	Individu::init();
}

void Simulation::addSortie(int x, int y)
{
	m_sorties.push_back({x,y});
}

void Simulation::addPylone(double x, double y)
{
	double r = 0.45;
	bool ok = true;
	std::vector<Individu*>* sous_liste;
	Individu* ind_lambda;
	int iter;

	for(unsigned int i=(x-1<0?0:x-1); i<=x+1 && i<TAILLE_GRILLE && ok; i++)
	{
		for(unsigned int j=(y-1<0?0:y-1); j<TAILLE_GRILLE && j<=y+1 && ok; j++)
		{
			sous_liste = Individu::getVecteursCase(i,j);
			iter = sous_liste->size();
			for(int k=0; k<iter; k++)
			{
				ind_lambda = sous_liste->at(k);
				if((ind_lambda->getPos()-Vect{x,y}).norme()<ind_lambda->getR()+r) // Si plus proches que leur rayon
				{
					ok = false;
					break;
				}
			}
		}
	}

	if(ok)
	{
		m_murs.push_back({x,y});
		new Individu(x,y,r,0,0, true);
	}
}

void Simulation::addIndiv(double x, double y) const
{
	double r = 0.2;
	bool ok = true;
	std::vector<Individu*>* sous_liste;
	Individu* ind_lambda;
	int iter;

	if(floor(x) == 10 && floor(y) == 10)
		return;

	for(unsigned int i=(x-1<0?0:x-1); i<=x+1 && i<TAILLE_GRILLE && ok; i++)
	{
		for(unsigned int j=(y-1<0?0:y-1); j<TAILLE_GRILLE && j<=y+1 && ok; j++)
		{
			sous_liste = Individu::getVecteursCase(i,j);
			iter = sous_liste->size();
			for(int k=0; k<iter; k++)
			{
				ind_lambda = sous_liste->at(k);
				if((ind_lambda->getPos()-Vect{x,y}).norme()<ind_lambda->getR()+r) // Si plus proches que leur rayon
				{
					ok = false;
					break;
				}
			}
		}
	}

	if(ok)
		new Individu(x, y, r, 4*r, 10*r, false);
}

void Simulation::addNIndiv(unsigned int n) const
{
	for(unsigned int i=0; i<n; i++)
	{
		addIndiv(2.+(m_taille_grille-4)*(rand()/(double)RAND_MAX), 2.+(m_taille_grille-4)*(rand()/(double)RAND_MAX));
	}
}

int Simulation::run()
{
	bool escape = false;
	std::vector<Individu*>* sous_liste;
	int iter;
	Individu* ptr_indiv = NULL;

	calculs_champs(m_taille_grille, m_sorties, m_murs);
	int nb_etapes = 0;

	while (Individu::nbIndiv() != 0)
	{
		// Mouvement individus
		for(unsigned int i=0; i<TAILLE_GRILLE*TAILLE_GRILLE; i++)
		{
			sous_liste = Individu::getVecteursCase(Distances_sorties[i].getX(),Distances_sorties[i].getY());
			iter = sous_liste->size()-1;
			for(int k=iter; k>-1; k--)
			{
				ptr_indiv= sous_liste->at(k);
				ptr_indiv->calculVitesse();
				escape = ptr_indiv->move();
				if(escape)
					delete sous_liste->at(k);
			}
		}
		nb_etapes++;
	}

	return nb_etapes;
}
