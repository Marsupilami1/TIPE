from time import time
import os
import ctypes as ct
import matplotlib.pyplot as plt
import numpy as np

os.system("clear")
c_library = ct.CDLL("./main.so")
point_list=np.array([])

def run():
    j = 0
    for i in range(indiv_d, indiv_f, pas):
        simu_resultat = c_library.evacuate(i)
        point_list[0][j] += simu_resultat%10000
        point_list[1][j] += simu_resultat//10000
        j += 1

with open("./Option_graph.txt", 'r') as options:
    Opt=options.read().split()[-5:]

indiv_d, indiv_f = int(Opt[0]), int(Opt[1])
pas, moyenne = int(Opt[2]), int(Opt[3])

pylones = []
if Opt[4] != "0":
    pylones=Opt[4].split(',')

print("Les derniers paramètres sont :")
print("Bornes :")
print(f"  Début : {indiv_d}\n  Fin : {indiv_f}")
print(f"Pas : {pas}")
print(f"Moyenne : {moyenne} points")

if len(pylones) == 0:
    print("Aucun pylône n'est placé")
else:
    print(f"Il y a {len(pylones)} pylônes en ")
    for i in pylones:
        print(i)


if input("Souhaitez vous changer ces paramètres [y/N] ? ") == 'y':
    options = open("./Option_graph.txt", 'a')
    indiv_d = int(input("Nombre d'individus au départ : "))
    indiv_f = int(input("Nombre d'individus à l'arrivée : "))
    pas = int(input("Pas: "))
    moyenne = int(input("Nombre de simulations (points) : "))

    if input("Souhaitez-vous placer des pylones [y/N] ? ") == 'y':
        pylones = []
        nb_pylones = int(input("Nombre de pylônes : "))
        if nb_pylones > 0:
            print("Les positions doivent être entée avec le format : x;y")
            for i in range(nb_pylones):
                pylones.append(input(f"Position du pylône {i+1} : "))
    else:
        options.write("0")

    options.write(f"{indiv_d} {indiv_f} {pas} ")

    for i in range(len(pylones)):
        options.write(pylones[i])
        if i != len(pylones)-1:
            options.write(',')
        options.write("\n")

    options.close()

for i in range(len(pylones)):
    x, y = pylones[i].split(';')
    c_library.preaddPylones(int(x), int(y))


taille = (indiv_f-indiv_d)//pas +1
point_list = np.array([np.zeros(taille),np.zeros(taille)])

t0 = time()
for i in range(moyenne):
    run()
    print(f"Série {i+1} terminée")
print(time()-t0)

print("Génération du graphe : ")
plt.title("Résultats de la simulation")
plt.plot(point_list[0]/moyenne, point_list[1]/moyenne)
plt.ylabel("Nombre d'itérations")
plt.xlabel("Nombre d'individus")

plt.show()
