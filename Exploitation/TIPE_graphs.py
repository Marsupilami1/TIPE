#Choses a faire : gestion des pylones + moyennes

import ctypes as ct
import matplotlib.pyplot as plt

c_library = ct.CDLL("./main.so")

point_list = [[],[]]

options=open("./Option_graph.txt","r")

Opt=options.read().split()[-4:]
options.close()

indiv_d,indiv_f=int(Opt[0]),int(Opt[1])
pas=int(Opt[2])
if Opt[3]=="0":
    pylones=[]
else:
    pylones=Opt[3].split(',')

print("Les anciens paramètres sont les suivants :")
print(str(indiv_d)+" individus au départ et " + str(indiv_f) + " à la fin")
print("Le pas est pour le moment de " + str(pas))
if len(pylones)==0:
    print("Aucun pylône n'est placé")
else:
    print("Il y a "+str(len(pylones))+" pylônes en ")
    for i in pylones:
        print(i)

print("Souhaitez vous changer ces paramètres ?\ny/n")

options=open("./Option_graph.txt","a")
if input()=="y":
    print("Combien d'individus voulez vous au départ ?")
    indiv_d=int(input())
    print("Combien à l'arrivée ?")
    indiv_f=int(input())
    pas=(indiv_f-indiv_d)//10
    print("Le pas est de " + str(pas))
    print("Souhaitez-vous mettre des pylones ?\ny/n")
    if input()=="y":
        print("Pas encore coder")
    else:
        Opt[3]="0"

options.write(str(indiv_d)+" "+str(indiv_f)+" "+str(pas)+" "+Opt[3]+"\n")
options.close()

for i in range(indiv_d,indiv_f, pas):
    simu_resultat=c_library.evacuate(i)
    point_list[0].append(simu_resultat%10000)
    point_list[1].append(simu_resultat//10000)

plt.title("Résultat de la simulation")
plt.plot(point_list[0], point_list[1])
plt.ylabel("Nombres d'itérations")
plt.xlabel("Nombres d'individus")
plt.show()
